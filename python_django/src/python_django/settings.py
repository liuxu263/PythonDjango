# coding:utf-8
"""
Django settings for python_django project.

Generated by 'django-admin startproject' using Django 2.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

import os
import sys

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.append("../")
sys.path.insert(0, os.path.join(BASE_DIR, 'python_django'))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = ')@_r-b6r7jhha6sr9p&^i1n1=ku5!jo!1(ll$rd2-u@iqdwg3r'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'python_django',
    'user',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'python_django.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR), 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'python_django.wsgi.application'

# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',  # 或者使用 mysql.connector.django
        'NAME': 'lx',
        'USER': 'root',
        'PASSWORD': 'liuxu263',
        'HOST': '127.0.0.1',
        'PORT': '3306',
    },
    'slave1': {
        'ENGINE': 'django.db.backends.mysql',  # 或者使用 mysql.connector.django
        'NAME': 'lx',
        'USER': 'root',
        'PASSWORD': 'liuxu263',
        'HOST': '127.0.0.1',
        'PORT': '3306',
    },
    'slave2': {
        'ENGINE': 'django.db.backends.mysql',  # 或者使用 mysql.connector.django
        'NAME': 'lx',
        'USER': 'root',
        'PASSWORD': 'liuxu263',
        'HOST': '127.0.0.1',
        'PORT': '3306',
    },

}

# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

REST_FRAMEWORK = {
    'DEFSULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAdminUser',
    ]
}

# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

STATIC_URL = '/static/'

# 得先确保项目根目录下有一个logs目录，logs目录用来存储日志文件
log_path = os.path.dirname(BASE_DIR)
LOGGING = {
    # 配置一个版本号
    'version': 1,
    # 配置为False，表示不禁用所有logging实例
    'disable_existing_loggers': False,
    # 通过formatter属性来配置日志的输出格式
    # formatter中的每一个键对应一个特定的输出格式
    'formatters': {
        # 详细的日志格式
        'verbose': {
            'format': '[%(asctime)s][%(threadName)s:%(thread)d][task_id:%(name)s][%(filename)s:%(lineno)d]'
                      '[%(levelname)s][%(message)s]'
        },
        # 标准的日志格式
        'standard': {
            'format': '[%(levelname)s][%(asctime)s][%(filename)s:%(lineno)d]%(message)s'
        },
        # 简单的日志格式
        'simple': {
            'format': '[%(levelname)s][ %(message)s]'
        },
    },
    'filters': {
    },
    'handlers': {
        # 配置default，表示默认的日志处理方法
        'info': {
            # 配置日志级别为INFO
            'level': 'INFO',
            # 使用RotatingFileHandler来进行日志的滚动处理
            'class': 'logging.handlers.RotatingFileHandler',
            # 配置日志的输出文件
            'filename': os.path.join(log_path + '/output/logs/', "info.log"),
            # 配置日志文件的最大大小，超出阈值即开始切日志
            'maxBytes': 1024 * 1024 * 50,
            # 配置日志文件的备份数目
            'backupCount': 3,
            # 引用的是formatter中的verbose
            'formatter': 'verbose',
            # 配置日志文件的字符编码为utf-8
            'encoding': 'utf-8',
        },
        # 专门用来记错误日志
        'error': {
            'level': 'ERROR',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(log_path + '/output/logs/', "error.log"),
            'maxBytes': 1024 * 1024 * 50,
            'backupCount': 5,
            'formatter': 'standard',
            'encoding': 'utf-8',
        },
        'console': {
            'level': 'INFO',  # 日志的级别
            'class': 'logging.StreamHandler',  #
            'formatter': 'simple'  # 使用哪种日志格式
        },

    },
    # loggers的每一个键表示一个logging实例
    'loggers': {
        'django': {
            # 引用handlers中配置的日志处理方式
            'handlers': ['info'],
            # 日志级别
            'level': 'INFO',
            # propagate表示是否向更高级别的logger传递
            'propagate': False,
        },
        'error': {
            # 引用handlers中配置的日志处理方式
            'handlers': ['error'],
            # 日志级别
            'level': 'ERROR',
            # propagate表示是否向更高级别的logger传递
            'propagate': True,
        },
        'test': {
            # 引用handlers中配置的日志处理方式
            'handlers': ['console'],
            # 日志级别
            'level': 'INFO',
            #  propagate表示是否向更高级别的logger传递
            'propagate': False,
        }
    }
}
